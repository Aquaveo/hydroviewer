from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
import psycopg2 as pg
import csv
import os
import datetime
import requests
import ast
import json
import math


import utm

from pyproj import Proj, transform


@csrf_exempt
def update_ffgs(request):

    try:
        if request.is_ajax() and request.method == 'POST':

            params = request.POST
            file_list = request.FILES.getlist('files')
            uploaded_file = file_list[0]

            if str(uploaded_file).lower().endswith(".txt"):

                current_path = os.path.dirname(os.path.realpath(__file__))
                data_staging_file = os.path.join(
                    current_path, "staging/data_staging.csv")

                csv_list = []

                for line in uploaded_file.read().splitlines():
                    csv_list.append(line.split('        '))

                csv_list.pop(0)

                id_check_list = ['2004700065', '2004700067', '2004700068', '2004700070', '2004700074', '2004700075', '2004700076', '2004700078', '2004700080', '2004700081', '2004700083', '2004700085', '2004700086', '2004700088', '2004700090', '2004700092', '2004700108', '2004700109', '2004700111', '2004700113', '2004700115', '2004700116', '2004700120', '2004700122', '2004700378', '2004700379', '2004700381', '2004700383', '2004700387', '2004700391', '2004700395', '2004700426', '2004700427', '2004700428', '2004700430', '2004700431', '2004700433', '2004700435', '2004700436', '2004700589', '2004700591', '2004700595', '2004700596', '2004700597', '2004700598', '2004700599', '2004700601', '2004700603', '2004700605', '2004700607', '2004700608', '2004700610', '2004700611', '2004700612', '2004700895', '2004700896', '2004700900', '2004700902', '2004700903', '2004700987', '2004701200', '2004701201', '2004701202', '2004701206', '2004701207', '2004701209', '2004701210', '2004701211', '2004701212', '2004701213', '2004700420', '2004700424', '2004700425', '2004700710', '2004700711', '2004700730', '2004700734', '2004700709', '2004700712', '2004700717', '2004700718', '2004700719', '2004700720', '2004700721', '2004700724', '2004700725', '2004700726', '2004700727', '2004700728', '2004700729', '2004700732', '2004700929', '2004700939', '2004700940', '2004700947', '2004700948', '2004700952', '2004700953', '2004700740', '2004700928', '2004700930', '2004700997', '2004701006', '2004700731', '2004700733', '2004700163', '2004701323', '2004700700', '2004700638', '2004700161', '2004700701', '2004700621', '2004700170', '2004700623', '2004700135', '2004700155', '2004700624', '2004701248', '2004700223', '2004700230', '2004700772', '2004701412', '2004700764', '2004700823', '2004701199', '2004700046', '2004700337', '2004700870', '2004701033', '2004701049', '2004701063', '2004701475', '2004700941', '2004701463', '2004701474', '2004701476', '2004700752', '2004700957', '2004701005', '2004701011', '2004701124', '2004700737', '2004700751', '2004701298', '2004700151', '2004700958', '2004701004', '2004701037', '2004701470', '2004700879', '2004700883', '2004701034', '2004701035', '2004701089', '2004701289', '2004701450', '2004701461', '2004701468', '2004700736', '2004700884', '2004701050', '2004700741', '2004701111', '2004701113', '2004700890', '2004700891', '2004700306', '2004701440', '2004700160', '2004701083', '2004700825', '2004700194', '2004700279', '2004700314', '2004701307', '2004701270', '2004700761', '2004701392', '2004701249', '2004701245', '2004700152', '2004700766', '2004701288', '2004700826', '2004701148', '2004701287', '2004701272', '2004700836', '2004701282', '2004700765', '2004700750', '2004700695', '2004701324', '2004701243', '2004701286', '2004701062', '2004700210', '2004700149', '2004701193', '2004701242', '2004700824', '2004701308', '2004701285', '2004700659', '2004700880', '2004701449', '2004701174', '2004700636', '2004701473', '2004701458', '2004700828', '2004701239', '2004700687', '2004701172', '2004700188', '2004700827', '2004700150', '2004700157', '2004700214', '2004701173', '2004701146', '2004700169', '2004701164', '2004700153', '2004701459', '2004700697', '2004701447', '2004700835', '2004701171', '2004701247', '2004700187', '2004700916', '2004700921', '2004701325', '2004701233', '2004700637', '2004701306', '2004701445', '2004700708', '2004701471', '2004701444', '2004700919', '2004701448', '2004700235', '2004701163', '2004701326', '2004701129', '2004701177', '2004700102', '2004701178', '2004701443', '2004701274', '2004701266', '2004701180', '2004700556', '2004700917', '2004701102', '2004701348', '2004700713', '2004701332', '2004701329', '2004700552', '2004701155', '2004700355', '2004701310', '2004700551', '2004701406', '2004700972', '2004701167', '2004700714', '2004700510', '2004700768', '2004701339', '2004700769', '2004701042', '2004700029', '2004700317', '2004700557', '2004700304', '2004700513', '2004701041', '2004700205', '2004700209', '2004701341', '2004701340', '2004700357', '2004700375', '2004700211', '2004700339', '2004700991', '2004700993', '2004701000', '2004700267', '2004700990', '2004701040', '2004701043', '2004700049', '2004700315', '2004700343', '2004700748', '2004701003', '2004701009', '2004701103', '2004700747', '2004701469', '2004700962', '2004701104', '2004700025', '2004700509', '2004700989', '2004700994', '2004700376', '2004701398', '2004700759', '2004700760', '2004700771', '2004700489', '2004700508', '2004700617', '2004700775', '2004701010', '2004700558', '2004700749', '2004701013', '2004700278', '2004700757', '2004700715', '2004700756', '2004700770', '2004700867', '2004700893', '2004701020', '2004701036', '2004701127', '2004700186', '2004700863', '2004700864', '2004700600', '2004700716', '2004700753', '2004700755', '2004701021', '2004701110', '2004701112', '2004701114', '2004701091', '2004701048', '2004700291', '2004700868', '2004700892', '2004701116', '2004701088', '2004701109', '2004701085', '2004701086', '2004700706', '2004700197', '2004700295', '2004700296', '2004701393', '2004701101', '2004700340', '2004700705', '2004701446', '2004701467', '2004700538', '2004701436', '2004700504', '2004701320', '2004700977', '2004701273', '2004701156', '2004701397', '2004701404', '2004700338', '2004700148', '2004701466', '2004700259', '2004701321', '2004700208', '2004701165', '2004700693', '2004700144', '2004700518', '2004701238', '2004700037', '2004700482', '2004701231', '2004700336', '2004700520', '2004701142', '2004701191', '2004701161', '2004701384', '2004700767', '2004701290', '2004701402', '2004701267', '2004700303', '2004701434', '2004701280', '2004700212', '2004701246', '2004701424', '2004700099', '2004701179', '2004700354', '2004700036', '2004700969', '2004700063', '2004700335', '2004701128', '2004701275', '2004700696', '2004700201', '2004700536', '2004700685', '2004700182', '2004700909', '2004700886', '2004701108', '2004701435', '2004700657', '2004700514', '2004700199', '2004700842', '2004700920', '2004701061', '2004700537', '2004701081', '2004701327', '2004700141', '2004701284', '2004701278', '2004701271', '2004700699', '2004700140', '2004700350', '2004701244', '2004701190', '2004700505', '2004700913', '2004700521', '2004700698', '2004701181', '2004701170', '2004700633', '2004701059', '2004700858', '2004700651', '2004701454', '2004700654', '2004700202', '2004700302', '2004700207', '2004700669', '2004701098', '2004700293', '2004700352', '2004701154', '2004701312', '2004700672', '2004701195', '2004701423', '2004701319', '2004700147', '2004700318', '2004700200', '2004700185', '2004701169', '2004701382', '2004701431', '2004701060', '2004700506', '2004700915', '2004700878', '2004700643', '2004700351', '2004700503', '2004701442', '2004701235', '2004700248', '2004700653', '2004701417', '2004701430', '2004701189', '2004700098', '2004700100', '2004700914', '2004700686', '2004700911', '2004700165', '2004700649', '2004701295', '2004700555', '2004701196', '2004700676', '2004700104', '2004700655', '2004701441', '2004700670', '2004700249', '2004700650', '2004700129', '2004701342', '2004701269', '2004701399', '2004701400', '2004700349', '2004700167', '2004700018', '2004701433', '2004700146', '2004700298', '2004700177', '2004700519', '2004700139', '2004701331', '2004700477', '2004700656', '2004700348', '2004700841', '2004700020', '2004700625', '2004700286', '2004700873', '2004701152', '2004701149', '2004701194', '2004701343', '2004700451', '2004701387', '2004700285', '2004700869', '2004700258', '2004700023', '2004700269', '2004701401', '2004700353', '2004700239', '2004700253', '2004700971', '2004701176', '2004701097', '2004700224', '2004700310', '2004700854', '2004700040', '2004700236', '2004701234', '2004700244', '2004700225', '2004700480', '2004700723', '2004701356', '2004700016', '2004700231', '2004700999', '2004700311', '2004700532', '2004700251', '2004701335', '2004700184', '2004700254', '2004701046', '2004700038', '2004700252', '2004701457', '2004701047', '2004700193', '2004700502', '2004701044', '2004700222', '2004700342', '2004700620', '2004701039', '2004700206', '2004701012', '2004701045', '2004700887', '2004700094', '2004700881', '2004700341', '2004700885', '2004700882', '2004701257', '2004701066', '2004701292', '2004700609', '2004700476', '2004700549', '2004700986', '2004701205', '2004700554', '2004700173', '2004701078', '2004701251', '2004700309', '2004700593', '2004700544', '2004701080', '2004701166', '2004700028', '2004701073', '2004701168', '2004700856', '2004700215', '2004700594', '2004701079', '2004700034', '2004701077', '2004701144', '2004700934', '2004701001', '2004700955', '2004700047', '2004701007', '2004700861', '2004700942', '2004700959', '2004701002', '2004700954', '2004700738', '2004700277', '2004700943', '2004700945', '2004700307', '2004700960', '2004700062', '2004700949', '2004700961', '2004700048', '2004700282', '2004700944', '2004700229', '2004701008', '2004700283', '2004700951', '2004700243', '2004700496', '2004700773', '2004700946', '2004700284', '2004700739', '2004700938', '2004700998', '2004700937', '2004701038', '2004700204', '2004700735', '2004700950', '2004701087', '2004701472', '2004701268', '2004700682', '2004700926', '2004700927', '2004700907', '2004700925', '2004700257', '2004700247', '2004700246', '2004701422', '2004700688', '2004701058', '2004700833', '2004700250', '2004701126', '2004701425', '2004701057', '2004701120', '2004700478', '2004700912', '2004700054', '2004700423', '2004700203', '2004700562', '2004700985', '2004701388', '2004700107', '2004700312', '2004700008', '2004700356', '2004700889', '2004701373', '2004700164', '2004701160', '2004701414', '2004700010', '2004700052', '2004700475', '2004700488', '2004700242', '2004700487', '2004701082', '2004701349', '2004700806', '2004700097', '2004700101', '2004700221', '2004701281', '2004701396', '2004700668', '2004701220', '2004700448', '2004700369', '2004701355', '2004700807', '2004700447', '2004700461', '2004700017', '2004700024', '2004700320', '2004700548', '2004701056', '2004700026', '2004700143', '2004700166', '2004700334', '2004700241', '2004701336', '2004700469', '2004700470', '2004700061', '2004701175', '2004700055', '2004701122', '2004700446', '2004700370', '2004700860', '2004700138', '2004700389', '2004700266', '2004700319', '2004701024', '2004701052', '2004701408',
                                 '2004701318', '2004700779', '2004701386', '2004700454', '2004700323', '2004700467', '2004700474', '2004700512', '2004700390', '2004700422', '2004700483', '2004700830', '2004701365', '2004700313', '2004701147', '2004701390', '2004701395', '2004700301', '2004700330', '2004700263', '2004701358', '2004700443', '2004700183', '2004701188', '2004700347', '2004701389', '2004701391', '2004701022', '2004700022', '2004701014', '2004700457', '2004700468', '2004700910', '2004700588', '2004700333', '2004701250', '2004700586', '2004701452', '2004701330', '2004700453', '2004700044', '2004700332', '2004700096', '2004701429', '2004700471', '2004700346', '2004700388', '2004700778', '2004700576', '2004700344', '2004701258', '2004701055', '2004701254', '2004701394', '2004700413', '2004700580', '2004701357', '2004700261', '2004700976', '2004700481', '2004700410', '2004700566', '2004700297', '2004700442', '2004700694', '2004701302', '2004700479', '2004700106', '2004700642', '2004700136', '2004700414', '2004700974', '2004700012', '2004700220', '2004700859', '2004700382', '2004700839', '2004700326', '2004700644', '2004700645', '2004700851', '2004701407', '2004701054', '2004700409', '2004700240', '2004701192', '2004700218', '2004700574', '2004700458', '2004700466', '2004700192', '2004701075', '2004701159', '2004701256', '2004700547', '2004701460', '2004700640', '2004701204', '2004700238', '2004700639', '2004701432', '2004701354', '2004701416', '2004700142', '2004700325', '2004700560', '2004700268', '2004701150', '2004700412', '2004701232', '2004700456', '2004701420', '2004700003', '2004700803', '2004700831', '2004700493', '2004700363', '2004700043', '2004700329', '2004701187', '2004701297', '2004700045', '2004701374', '2004700030', '2004701350', '2004700019', '2004701352', '2004700497', '2004700918', '2004700393', '2004700634', '2004701405', '2004700411', '2004700781', '2004700692', '2004700515', '2004701236', '2004701070', '2004701409', '2004700579', '2004700156', '2004700464', '2004701074', '2004700265', '2004701138', '2004700570', '2004700782', '2004700813', '2004700800', '2004701345', '2004700792', '2004700984', '2004700362', '2004701403', '2004700743', '2004700822', '2004700237', '2004700564', '2004700397', '2004700567', '2004700181', '2004700300', '2004701072', '2004700027', '2004700168', '2004701259', '2004701477', '2004700956', '2004701015', '2004701184', '2004701019', '2004700051', '2004700774', '2004700988', '2004701016', '2004701304', '2004700789', '2004700790', '2004701018', '2004701132', '2004701158', '2004700745', '2004700837', '2004700862', '2004700463', '2004700788', '2004701090', '2004701305', '2004700776', '2004701131', '2004700385', '2004700754', '2004700777', '2004701017', '2004701130', '2004701303', '2004700758', '2004701032', '2004700783', '2004701222', '2004700137', '2004701371', '2004701094', '2004700328', '2004700746', '2004700635', '2004700465', '2004700542', '2004701451', '2004701053', '2004700294', '2004701362', '2004700324', '2004701372', '2004701283', '2004700219', '2004701221', '2004700327', '2004700821', '2004701263', '2004701230', '2004700179', '2004700501', '2004700744', '2004700264', '2004700217', '2004701317', '2004701051', '2004700292', '2004700876', '2004700820', '2004700578', '2004701071', '2004700041', '2004700364', '2004700762', '2004700322', '2004701151', '2004701439', '2004700450', '2004700386', '2004700473', '2004700262', '2004700216', '2004701456', '2004700871', '2004700805', '2004700408', '2004700742', '2004700577', '2004701368', '2004700394', '2004701240', '2004700290', '2004700796', '2004701370', '2004701385', '2004700014', '2004700299', '2004700449', '2004701216', '2004701277', '2004700829', '2004701316', '2004700256', '2004700145', '2004701023', '2004700511', '2004700786', '2004700039', '2004700154', '2004700857', '2004700245', '2004700287', '2004700819', '2004700050', '2004701067', '2004700321', '2004701438', '2004701069', '2004700565', '2004701369', '2004700180', '2004700105', '2004700162', '2004700641', '2004700260', '2004700419', '2004700492', '2004700533', '2004701183', '2004701137', '2004700832', '2004701428', '2004700785', '2004700331', '2004700384', '2004700563', '2004701367', '2004700507', '2004700441', '2004700671', '2004701141', '2004700400', '2004700131', '2004700975', '2004701139', '2004700440', '2004700407', '2004700498', '2004700855', '2004700817', '2004701361', '2004701359', '2004700013', '2004701301', '2004700980', '2004701360', '2004701418', '2004701437', '2004700011', '2004700815', '2004701296', '2004700816', '2004701143', '2004701197', '2004700472', '2004701366', '2004701315', '2004700175', '2004700791', '2004701338', '2004700561', '2004701364', '2004700840', '2004700780', '2004700811', '2004701140', '2004700171', '2004701279', '2004700439', '2004700834', '2004700371', '2004700035', '2004700123', '2004700850', '2004700922', '2004700664', '2004700127', '2004701162', '2004700009', '2004700814', '2004700406', '2004700970', '2004700516', '2004700665', '2004700103', '2004700539', '2004700438', '2004701182', '2004700666', '2004701328', '2004700535', '2004700964', '2004700437', '2004701157', '2004700966', '2004700897', '2004700007', '2004701145', '2004700667', '2004700500', '2004700818', '2004700358', '2004700763', '2004700707', '2004700606', '2004701115', '2004700490', '2004701413', '2004700894', '2004700585', '2004701084', '2004700064', '2004701337', '2004700522', '2004700198', '2004700559', '2004701093', '2004700604', '2004700112', '2004700190', '2004700703', '2004700602', '2004701314', '2004700134', '2004700380', '2004701265', '2004700545', '2004700110', '2004701208', '2004700865', '2004700660', '2004700853', '2004700499', '2004700462', '2004700614', '2004700460', '2004700117', '2004701076', '2004700534', '2004701455', '2004700005', '2004700091', '2004700082', '2004700529', '2004701377', '2004700618', '2004701136', '2004700843', '2004700981', '2004700191', '2004700114', '2004701353', '2004700525', '2004700874', '2004700983', '2004700196', '2004701311', '2004700079', '2004700089', '2004700077', '2004700069', '2004700280', '2004700189', '2004700459', '2004700072', '2004700073', '2004700704', '2004700071', '2004701410', '2004700445', '2004701427', '2004700847', '2004700573', '2004700683', '2004700888', '2004700575', '2004700846', '2004701123', '2004701313', '2004700646', '2004700158', '2004700004', '2004700679', '2004701465', '2004700417', '2004700804', '2004700680', '2004701185', '2004700661', '2004700133', '2004700455', '2004701464', '2004700872', '2004700982', '2004700678', '2004701223', '2004701462', '2004701411', '2004701383', '2004701229', '2004700159', '2004700677', '2004701217', '2004701453', '2004701344', '2004700845', '2004700517', '2004701379', '2004700965', '2004700550', '2004701262', '2004701300', '2004701346', '2004700541', '2004701426', '2004700572', '2004700978', '2004700802', '2004701351', '2004700308', '2004701375', '2004701415', '2004700812', '2004701226', '2004701153', '2004701299', '2004701118', '2004700848', '2004701227', '2004700571', '2004700877', '2004701381', '2004700316', '2004700838', '2004701363', '2004700546', '2004700801', '2004701380', '2004701293', '2004700125', '2004701186', '2004700228', '2004700403', '2004700178', '2004701264', '2004701031', '2004700405', '2004700875', '2004701421', '2004701068', '2004701121', '2004700124', '2004700628', '2004701224', '2004700401', '2004701203', '2004700060', '2004700226', '2004700399', '2004701347', '2004701237', '2004700227', '2004701219', '2004701294', '2004701378', '2004700042', '2004700059', '2004700681', '2004701334', '2004701419', '2004700626', '2004700652', '2004700485', '2004701218', '2004700006', '2004700898', '2004700033', '2004700899', '2004700901', '2004700648', '2004700933', '2004700992', '2004700931', '2004701291', '2004700444', '2004700932', '2004700663', '2004700582', '2004700935', '2004700995', '2004700119', '2004700581', '2004700622', '2004700996', '2004701214', '2004700058', '2004700590', '2004700924', '2004700936', '2004700053', '2004700095', '2004700031', '2004700923', '2004700021', '2004700121', '2004700367', '2004700866', '2004700799', '2004700452', '2004700553', '2004700616', '2004700619', '2004700702', '2004701333', '2004700057', '2004700613', '2004700615', '2004700647', '2004701322', '2004700494', '2004700234', '2004700432', '2004700281', '2004700093', '2004700056', '2004700377', '2004700374', '2004700015', '2004700271', '2004700345', '2004700434', '2004700968', '2004701198', '2004700270', '2004700691', '2004700908', '2004700967', '2004700373', '2004700852', '2004700722', '2004700905', '2004700583', '2004700904', '2004700569', '2004700906', '2004700368', '2004700810', '2004700372', '2004700568', '2004700787', '2004700429', '2004700808', '2004700118', '2004701096', '2004700176', '2004701065', '2004700798', '2004700632', '2004701064', '2004700531', '2004700288', '2004700662', '2004701255', '2004700486', '2004700631', '2004700689', '2004700174', '2004701241', '2004701092', '2004700844', '2004700690', '2004700366', '2004700361', '2004700630', '2004700629', '2004700528', '2004700527', '2004700365', '2004700360', '2004700794', '2004701027', '2004700418', '2004700484', '2004700627', '2004700849', '2004700592', '2004700587', '2004701095', '2004700233', '2004700232', '2004700195', '2004700809', '2004700084', '2004700276', '2004700255', '2004700087', '2004700066', '2004700273', '2004700274', '2004700275', '2004700213', '2004700305', '2004700404', '2004700272', '2004701133', '2004700684', '2004700359', '2004700032', '2004700289', '2004701107', '2004700392', '2004700584', '2004700784', '2004700421', '2004701100', '2004700543', '2004701099', '2004701028', '2004700491', '2004701030', '2004700658', '2004700963', '2004700130', '2004701376', '2004700540', '2004700416', '2004701106', '2004701228', '2004701261', '2004701026', '2004700523', '2004701276', '2004700675', '2004701105', '2004700495', '2004701215', '2004700674', '2004700673', '2004701225', '2004700415', '2004700979', '2004700402', '2004700172', '2004700973', '2004700530', '2004700398', '2004700526', '2004701260', '2004700524', '2004701253', '2004700132', '2004700396', '2004701252', '2004701119', '2004700128', '2004701309', '2004700126', '2004700797', '2004700795', '2004700793', '2004701029', '2004701134', '2004701135', '2004701125', '2004701025', '2004701117']

                sid_list = [x[0] for x in csv_list]
                val_list = [x[1] for x in csv_list]

                csv_result = []

                for x, sid in enumerate(id_check_list):
                    val = val_list[sid_list.index(sid)]
                    csv_result.append([sid, val])

                with open(data_staging_file, "wb") as f:
                    writer = csv.writer(f)
                    writer.writerows(csv_result)

                with open(data_staging_file, 'r') as f:
                    reader = csv.reader(f)
                    data_list = map(tuple, reader)
                    id_list = []
                    value_list = []
                    for n in data_list:
                        if len(n) == 2:
                            id_list.append(n[0])
                            value_list.append(n[1])
                        else:
                            return JsonResponse({'success': 'false'})

                    for n in value_list:
                        if not isinstance(float(n), float):
                            return JsonResponse({'success': 'false'})

                    if id_list != id_check_list:
                        return JsonResponse({'success': 'false'})

                    if len(id_list) != len(id_check_list):
                        return JsonResponse({'success': 'false'})

                    if len(value_list) != len(id_check_list):
                        return JsonResponse({'success': 'false'})

                with open(data_staging_file, 'r') as g:

                    conn = pg.connect(
                        'host=tethys-staging.byu.edu dbname=hydroviewer_hispaniola user=tethys_super password=pass port=5435')

                    cur = conn.cursor()

                    cur.execute(
                        """drop table if exists public.ffgs_precip_old;""")

                    cur.execute(
                        """create table public.ffgs_precip_old as table public.ffgs_precip;""")

                    cur.execute("""truncate table public.ffgs_precip;""")

                    cur.copy_from(g, '"ffgs_precip"', sep=',')

                    conn.commit()

                    conn.close()

                return JsonResponse({'success': 'true'})

            else:
                return JsonResponse({'success': 'false'})
        else:
            return JsonResponse({'success': 'false'})
    except:
        return JsonResponse({'success': 'false'})


# Convert json string into geojson object
def convert_json(items):

    # we have to convert the text from latin encoding to utf8 so that we don't get errors
    # while trying to write it out in JSON.

    features = []
    for feature in items:
        if feature['X'] and feature['Y']:
            try:
                newLatLong = utm.to_latlon(
                    float(feature['X']), float(feature['Y']), 19, 'Q')
                newFeature = {
                    "type": "Feature",
                    "geometry": {"type": "Point",
                                 "lat": newLatLong[1],
                                 "long": newLatLong[0]},
                    "properties": {key: value.decode('iso-8859-1').encode('utf8')
                                   for key, value in feature.items()
                                   if key not in ('X', 'Y')}
                    }
                features.append(newFeature)
            except:
                print "Invalid Line found in CSV File"
                print feature

    featureCollection = {"features": features}

    return json.dumps(featureCollection, ensure_ascii=False)


@csrf_exempt
def update_csv(request):

    return_obj = {'success': False}

    if request.is_ajax() and request.method == 'POST':

        file_list = request.FILES.getlist('files')
        uploaded_file = file_list[0]

        if str(uploaded_file).lower().endswith(".csv"):
            reader = csv.DictReader(uploaded_file)
            rows = list(reader)
            geojsonstring = convert_json(rows)
            return_obj = {'success': True, 'stationgeojson': geojsonstring}

            return JsonResponse(return_obj)

        else:
            return JsonResponse(return_obj)
    else:
        return JsonResponse(return_obj)


def forecastpercent(request):

    # Check if its an ajax post request
    if request.is_ajax() and request.method == 'GET':

        forecast = 'most_recent'
        watershed = 'Dominican Republic'
        subbasin = 'National'
        reach = request.GET.get('comid')

        request_params = dict(watershed_name=watershed, subbasin_name=subbasin, reach_id=reach,
                              forecast_folder=forecast)
        request_headers = dict(
            Authorization='Token fa7fa9f7d35eddb64011913ef8a27129c9740f3c')
        ens = requests.get('http://tethys-staging.byu.edu/apps/streamflow-prediction-tool/api/GetEnsemble/',
                           params=request_params, headers=request_headers)

        request_params1 = dict(watershed_name=watershed,
                               subbasin_name=subbasin, reach_id=reach)
        request_headers1 = dict(
            Authorization='Token fa7fa9f7d35eddb64011913ef8a27129c9740f3c')
        rpall = requests.get('http://tethys-staging.byu.edu/apps/streamflow-prediction-tool/api/GetReturnPeriods/',
                             params=request_params1, headers=request_headers1)

        dicts = ens.content.splitlines()
        dictstr = []

        rpdict = ast.literal_eval(rpall.content)
        rpdict.pop('max', None)

        rivperc = {}
        riverpercent = {}
        rivpercorder = {}

        for q in rpdict:
            rivperc[q] = {}
            riverpercent[q] = {}

        dictlen = len(dicts)
        for i in range(1, dictlen):
            dictstr.append(dicts[i].split(","))

        for rps in rivperc:
            rp = float(rpdict[rps])
            for b in dictstr:
                date = b[0][:10]
                if date not in rivperc[rps]:
                    rivperc[rps][date] = []
                length = len(b)
                for x in range(1, length):
                    flow = float(b[x])
                    if x not in rivperc[rps][date] and flow > rp:
                        rivperc[rps][date].append(x)
            for e in rivperc[rps]:
                riverpercent[rps][e] = float(len(rivperc[rps][e])) / 51.0 * 100

        for keyss in rivperc:
            data = riverpercent[keyss]
            ordered_data = sorted(
                data.items(), key=lambda x: datetime.datetime.strptime(x[0], '%Y-%m-%d'))
            rivpercorder[keyss] = ordered_data

        rivdates = []
        rivperctwo = []
        rivpercten = []
        rivperctwenty = []

        for a in rivpercorder['two']:
            rivdates.append(a[0])
            rivperctwo.append(a[1])

        for s in rivpercorder['ten']:
            rivpercten.append(s[1])

        for d in rivpercorder['twenty']:
            rivperctwenty.append(d[1])

        formatteddates = [str(elem)[-4:] for elem in rivdates]
        formattedtwo = ["%.0f" % elem for elem in rivperctwo]
        formattedten = ["%.0f" % elem for elem in rivpercten]
        formattedtwenty = ["%.0f" % elem for elem in rivperctwenty]

        formatteddates = formatteddates[:len(formatteddates) - 5]
        formattedtwo = formattedtwo[:len(formattedtwo) - 5]
        formattedten = formattedten[:len(formattedten) - 5]
        formattedtwenty = formattedtwenty[:len(formattedtwenty) - 5]

        dataformatted = {'percdates': formatteddates, 'two': formattedtwo, 'ten': formattedten,
                         'twenty': formattedtwenty}

        return JsonResponse(dataformatted)
